// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: metalbond.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetalBondClient is the client API for MetalBond service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetalBondClient interface {
	Hello(ctx context.Context, in *Hello, opts ...grpc.CallOption) (*Hello, error)
	Keepalive(ctx context.Context, opts ...grpc.CallOption) (MetalBond_KeepaliveClient, error)
	Subscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*Error, error)
	Unsubscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*Error, error)
	Update(ctx context.Context, opts ...grpc.CallOption) (MetalBond_UpdateClient, error)
}

type metalBondClient struct {
	cc grpc.ClientConnInterface
}

func NewMetalBondClient(cc grpc.ClientConnInterface) MetalBondClient {
	return &metalBondClient{cc}
}

func (c *metalBondClient) Hello(ctx context.Context, in *Hello, opts ...grpc.CallOption) (*Hello, error) {
	out := new(Hello)
	err := c.cc.Invoke(ctx, "/metalbond.MetalBond/hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metalBondClient) Keepalive(ctx context.Context, opts ...grpc.CallOption) (MetalBond_KeepaliveClient, error) {
	stream, err := c.cc.NewStream(ctx, &MetalBond_ServiceDesc.Streams[0], "/metalbond.MetalBond/keepalive", opts...)
	if err != nil {
		return nil, err
	}
	x := &metalBondKeepaliveClient{stream}
	return x, nil
}

type MetalBond_KeepaliveClient interface {
	Send(*Error) error
	Recv() (*Error, error)
	grpc.ClientStream
}

type metalBondKeepaliveClient struct {
	grpc.ClientStream
}

func (x *metalBondKeepaliveClient) Send(m *Error) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metalBondKeepaliveClient) Recv() (*Error, error) {
	m := new(Error)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metalBondClient) Subscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/metalbond.MetalBond/subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metalBondClient) Unsubscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/metalbond.MetalBond/unsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metalBondClient) Update(ctx context.Context, opts ...grpc.CallOption) (MetalBond_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &MetalBond_ServiceDesc.Streams[1], "/metalbond.MetalBond/update", opts...)
	if err != nil {
		return nil, err
	}
	x := &metalBondUpdateClient{stream}
	return x, nil
}

type MetalBond_UpdateClient interface {
	Send(*Update) error
	Recv() (*Update, error)
	grpc.ClientStream
}

type metalBondUpdateClient struct {
	grpc.ClientStream
}

func (x *metalBondUpdateClient) Send(m *Update) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metalBondUpdateClient) Recv() (*Update, error) {
	m := new(Update)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MetalBondServer is the server API for MetalBond service.
// All implementations must embed UnimplementedMetalBondServer
// for forward compatibility
type MetalBondServer interface {
	Hello(context.Context, *Hello) (*Hello, error)
	Keepalive(MetalBond_KeepaliveServer) error
	Subscribe(context.Context, *Subscription) (*Error, error)
	Unsubscribe(context.Context, *Subscription) (*Error, error)
	Update(MetalBond_UpdateServer) error
	mustEmbedUnimplementedMetalBondServer()
}

// UnimplementedMetalBondServer must be embedded to have forward compatible implementations.
type UnimplementedMetalBondServer struct {
}

func (UnimplementedMetalBondServer) Hello(context.Context, *Hello) (*Hello, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedMetalBondServer) Keepalive(MetalBond_KeepaliveServer) error {
	return status.Errorf(codes.Unimplemented, "method Keepalive not implemented")
}
func (UnimplementedMetalBondServer) Subscribe(context.Context, *Subscription) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedMetalBondServer) Unsubscribe(context.Context, *Subscription) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedMetalBondServer) Update(MetalBond_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMetalBondServer) mustEmbedUnimplementedMetalBondServer() {}

// UnsafeMetalBondServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetalBondServer will
// result in compilation errors.
type UnsafeMetalBondServer interface {
	mustEmbedUnimplementedMetalBondServer()
}

func RegisterMetalBondServer(s grpc.ServiceRegistrar, srv MetalBondServer) {
	s.RegisterService(&MetalBond_ServiceDesc, srv)
}

func _MetalBond_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hello)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetalBondServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metalbond.MetalBond/hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetalBondServer).Hello(ctx, req.(*Hello))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetalBond_Keepalive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetalBondServer).Keepalive(&metalBondKeepaliveServer{stream})
}

type MetalBond_KeepaliveServer interface {
	Send(*Error) error
	Recv() (*Error, error)
	grpc.ServerStream
}

type metalBondKeepaliveServer struct {
	grpc.ServerStream
}

func (x *metalBondKeepaliveServer) Send(m *Error) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metalBondKeepaliveServer) Recv() (*Error, error) {
	m := new(Error)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MetalBond_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetalBondServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metalbond.MetalBond/subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetalBondServer).Subscribe(ctx, req.(*Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetalBond_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetalBondServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metalbond.MetalBond/unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetalBondServer).Unsubscribe(ctx, req.(*Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetalBond_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetalBondServer).Update(&metalBondUpdateServer{stream})
}

type MetalBond_UpdateServer interface {
	Send(*Update) error
	Recv() (*Update, error)
	grpc.ServerStream
}

type metalBondUpdateServer struct {
	grpc.ServerStream
}

func (x *metalBondUpdateServer) Send(m *Update) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metalBondUpdateServer) Recv() (*Update, error) {
	m := new(Update)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MetalBond_ServiceDesc is the grpc.ServiceDesc for MetalBond service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetalBond_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metalbond.MetalBond",
	HandlerType: (*MetalBondServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "hello",
			Handler:    _MetalBond_Hello_Handler,
		},
		{
			MethodName: "subscribe",
			Handler:    _MetalBond_Subscribe_Handler,
		},
		{
			MethodName: "unsubscribe",
			Handler:    _MetalBond_Unsubscribe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "keepalive",
			Handler:       _MetalBond_Keepalive_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "update",
			Handler:       _MetalBond_Update_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "metalbond.proto",
}
